name: Deploy Resources

on:
  push:
    branches:
      - main  # Adjust this to the branch you want to trigger the deployment on
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: windows-latest  # Use a Windows runner for PowerShell scripts

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3  # Checks out your repository

    - name: Setup PowerShell
      shell: pwsh
      run: |
        $PSVersionTable.PSVersion

    - name: Run Deployment Script with Input
      shell: pwsh
      run: |
        cd Deployment
        $input = @"
        ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        CanadaCentral
        WestUS3
        v-harmanprka@MngEnvMCAP993385.onmicrosoft.com
        yes
        "@
        $input | pwsh ./resourcedeployment.ps1
        echo "Resource Group Name is ${{ env.rg_name }}"
        echo "Kubernetes resource group are ${{ env.krg_name }}"
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
    - name: Cleanup Resource Group
      if: always()  # Ensures this step runs even if the deployment fails
      shell: pwsh
      run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az group delete --name ${{ env.rg_name }} --yes --no-wait
          az group delete --name ${{ env.krg_name }} --yes --no-wait
      env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Wait for Resource Deletion to Complete
      shell: pwsh
      run: |
            $retries = 0
            $maxRetries = 3
            $sleepIntervals = @(300, 600, 900)
    
            while ($retries -lt $maxRetries) {
              $rgStatus = az group exists --name ${{ env.rg_name }}
              $krgStatus = az group exists --name ${{ env.krg_name }}
    
              if (-not $rgStatus -and -not $krgStatus) {
                Write-Host "Both resource groups deleted successfully."
                break
              }
    
              $retries++
              if ($retries -eq $maxRetries) {
                Write-Host "Resource groups deletion not confirmed after $maxRetries attempts. Exiting."
                exit 1
              }
    
              Write-Host "Resource groups still exist. Retrying in $($sleepIntervals[$retries - 1]) seconds..."
              Start-Sleep -Seconds $sleepIntervals[$retries - 1]
            }
    
    - name: Purging the Resources
      if: success()
      run: |
            openai_name="openaiservice-${{ env.SOLUTION_PREFIX }}"
            cognitiveservice_name="cognitiveservice-${{ env.SOLUTION_PREFIX }}"
  
            # Purge OpenAI Resource
            echo "Purging OpenAI resource: $openai_name"
            az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$openai_name || echo "Failed to purge OpenAI resource."
  
            # Purge cognitiveservice Account
            echo "Purging cognitiveservice Account: $cognitiveservice_name"
            az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$cognitiveservice_name || echo "Failed to purge MultiService Account."
  
    - name: Send Notification on Failure
      if: failure()
      run: |
            RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
            EMAIL_BODY=$(cat <<EOF
            {
              "body": "<p>Dear Team,</p><p>The CKMv2 Automation process encountered an issue.</p><p><strong>Build URL:</strong> <a href='${RUN_URL}'>${RUN_URL}</a></p><p>Please investigate promptly.</p><p>Best regards,<br>Your Automation Team</p>"
            }
            EOF
            )
  
            curl -X POST "${{ secrets.LOGIC_APP_URL }}" \
              -H "Content-Type: application/json" \
              -d "$EMAIL_BODY" || echo "Failed to send notification."