name: Deploy Resources

on:
  push:
    branches:
      - main  # Adjust this to the branch you want to trigger the deployment on
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: windows-latest  # Use a Windows runner for PowerShell scripts

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3  # Checks out your repository

    - name: Setup PowerShell
      shell: pwsh
      run: |
        $PSVersionTable.PSVersion

    - name: Run Deployment Script with Input
      shell: pwsh
      run: |
        cd Deployment
        $input = @"
        ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        CanadaCentral
        SwedenCentral
        v-harmanprka@MngEnvMCAP993385.onmicrosoft.com
        yes
        "@
        $input | pwsh ./resourcedeployment.ps1
        echo "Resource Group Name is ${{ env.rg_name }}"
        echo "Kubernetes resource group are ${{ env.krg_name }}"
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
    - name: Cleanup Resource Group
      if: always()  # Ensures this step runs even if the deployment fails
      shell: pwsh
      run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az group delete --name ${{ env.rg_name }} --yes --no-wait
          az group delete --name ${{ env.krg_name }} --yes --no-wait
      env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Wait for Resource Deletion to Complete
      run: |


        # Get the list of resources in YAML format
        resource_list=$(az resource list --resource-group ${{ env.rg_name }} --output yaml)

        # Maximum number of retries
        max_retries=3

        # Retry intervals in seconds (30, 60, 120)
        retry_intervals=(30 60 120)

        # Retry mechanism to check resources
        retries=0
        while true; do
          resource_found=false

          # Iterate through the resources to check
          for resource in "${resources_to_check[@]}"; do
            echo "Checking resource: $resource"
            if echo "$resource_list" | grep -q "name: $resource"; then
              echo "Resource '$resource' exists in the resource group."
              resource_found=true
            else
              echo "Resource '$resource' does not exist in the resource group."
            fi
          done

          # If any resource exists, retry
          if [ "$resource_found" = true ]; then
            retries=$((retries + 1))
            if [ "$retries" -ge "$max_retries" ]; then
              echo "Maximum retry attempts reached. Exiting."
              break
            else
              # Wait for the appropriate interval for the current retry
              echo "Waiting for ${retry_intervals[$retries-1]} seconds before retrying..."
              sleep ${retry_intervals[$retries-1]}
            fi
          else
            echo "No resources found. Exiting."
            break
          fi
        done

    - name: Purging the Resources
      if: success()
      run: |
        set -e
        # Define variables
        OPENAI_COMMON_PART="-openai"
        openai_name="${{ env.SOLUTION_PREFIX }}${OPENAI_COMMON_PART}"
        echo "Azure OpenAI: $openai_name"

        MULTISERVICE_COMMON_PART="-cogser"
        multiservice_account_name="${{ env.SOLUTION_PREFIX }}${MULTISERVICE_COMMON_PART}"
        echo "Azure MultiService Account: $multiservice_account_name"

        # Purge OpenAI Resource
        echo "Purging the OpenAI Resource..."
        if ! az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$openai_name --verbose; then
          echo "Failed to purge openai resource: $openai_name"
        else
          echo "Purged the openai resource: $openai_name"
        fi

        # Purge MultiService Account Resource
        echo "Purging the MultiService Account Resource..."
        if ! az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$multiservice_account_name --verbose; then
          echo "Failed to purge multiService account resource: $multiservice_account_name"
        else
          echo "Purged the multiService account resource: $multiservice_account_name"
        fi

       

        echo "Resource purging completed successfully"

    - name: Send Notification on Failure
      if: failure()
      run: |
        RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        # Construct the email body
        EMAIL_BODY=$(cat <<EOF
        {
          "body": "<p>Dear Team,</p><p>We would like to inform you that the CKMv2 Automation process has encountered an issue and has failed to complete successfully.</p><p><strong>Build URL:</strong> ${RUN_URL}<br> ${OUTPUT}</p><p>Please investigate the matter at your earliest convenience.</p><p>Best regards,<br>Your Automation Team</p>"
        }
        EOF
        )

        # Send the notification
        curl -X POST "${{ secrets.LOGIC_APP_URL }}" \
          -H "Content-Type: application/json" \
          -d "$EMAIL_BODY" || echo "Failed to send notification"
